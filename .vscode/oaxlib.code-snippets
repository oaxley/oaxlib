{
	// Place your oaxlib workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "C++ Header": {
        "scope": "cpp,c",
		"prefix": "!header",
		"body": [
			"/*",
			" * @file\t$TM_FILENAME",
            " * @author\tSebastien LEGRAND (oaxley)",
            " * @license\tMIT License",
            " *",
            " * @brief\t$1",
            " */",
            "$0"
		],
		"description": "Create the standard C++ header"
	},

    "C++ guards": {
        "scope": "cpp,c",
        "prefix": "!guards",
        "body": [
            "// guards",
            "#ifndef ${RELATIVE_FILEPATH/[\\.\\/]/_/g}_",
            "#define ${RELATIVE_FILEPATH/[\\.\\/]/_/g}_",
            "",
            "$0",
            "",
            "#endif // ${RELATIVE_FILEPATH/[\\.\\/]/_/g}_"
        ],
        "description": "Add guards directives to a header file"
    },

    "C++ namespace": {
        "scope": "cpp",
        "prefix": "!ns",
        "body": [
            "namespace $1 {",
            "",
            "$0",
            "",
            "} // $1::"
        ],
        "description": "Generate namespace"
    }
}
